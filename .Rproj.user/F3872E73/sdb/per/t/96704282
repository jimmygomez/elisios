{
    "collab_server" : "",
    "contents" : "#' Penman-Monteith method\n#'\n#' @description Function for calculate the daily evapotranspiration.\n#' @param data data frame with the metrerological information.\n#' @param date  date of the weather measure. format: yyy-mm-dd.\n#' @param Tmin temperatura minima (ºC).\n#' @param Tmax temperatura maxima (ºC).\n#' @param RHmin humedad relativa minima (\\%).\n#' @param RHmax humedad relativa maxima (\\%).\n#' @param sunshine sunshine (hours).\n#' @param wind wind velocity (m.seg-1).\n#' @param lat latitud (deciaml radians).\n#' @param alt altitud (meters)\n#' @param Hws heigth of data collect for wind speed (meters).\n#' @param alb albedo\n#' @return data frame with daily evapotranspiration\n#' @importFrom lubridate yday\n#' @importFrom zoo as.Date\n#' @export\n\n\nPenMon <- function(data, date, Tmin, Tmax, RHmin, RHmax, sunshine, wind, lat, alt, Hws, alb = 0.23) {\n\n\n    data <- as.data.frame(data)\n\n    date <- data[, date] %>% zoo::as.Date()\n    Tmin <- data[, Tmin] %>% as.numeric()\n    Tmax <- data[, Tmax] %>% as.numeric()\n    RHmin <- data[, RHmin] %>% as.numeric()\n    RHmax <- data[, RHmax] %>% as.numeric()\n    sunshine <- data[, sunshine] %>% as.numeric()\n    wind <- data[, wind] %>% as.numeric()\n    lat <- data[, lat] %>% as.numeric()\n    alt <- data[, alt] %>% as.numeric()\n    Hws <- data[, Hws] %>% as.numeric()\n\n\n    # wind <> 2 m\n    # -------------------------------------------------------------\n\n    # Ec. 47\n\n    uz <- wind * ((4.87)/(log(67.8 * Hws - 5.42)))\n\n\n    # Temperature media\n    # -------------------------------------------------------\n\n    # Ec. 9\n\n    Tm <- (Tmax + Tmin)/2\n\n    # pressure\n    # ----------------------------------------------------------------\n\n    # Ec. 7\n\n    P <- 101.3 * ((293 - 0.0065 * alt)/(293))\n\n\n    # Constante psicrometrica\n    # -------------------------------------------------\n\n    # Ec. 8\n\n    kp <- (1.013 * 10^(-3) * P)/(2.45 * 0.622)\n\n\n    # Pendiente de la curva de presion de saturacion de vapor\n    # -----------------\n\n    # Ec. 13\n\n    psv <- (4098 * (0.6108 * exp((17.27 * Tm)/(Tm + 237.3))))/(Tm + 237.3)^2\n\n\n    # Deficit de presion de vapor\n    # ---------------------------------------------\n\n    # Ec. 11\n\n    tx <- 0.6108 * exp((17.27 * Tmax)/(Tmax + 237.3))\n    tm <- 0.6108 * exp((17.27 * Tmin)/(Tmin + 237.3))\n\n    es <- (tx + tm)/2\n\n    ea <- (tm * (RHmax/100) + tx * (RHmin/100))/2\n\n    # Ec. 17\n\n    dpv <- es - ea\n\n\n    # Radiation\n    # ---------------------------------------------------------------\n\n\n    J <- lubridate::yday(date)\n\n    # Ec. 23\n\n    dr <- 1 + 0.033 * cos((2 * pi/365) * J)\n\n    # Ec. 24\n\n    ds <- 0.409 * sin(((2 * pi)/(365)) * J - 1.39)\n\n    # Ec. 25\n\n    ws <- acos(-tan(lat) * tan(ds))\n\n    # Ec. 21\n\n    Ra <- ((24 * 60)/pi) * 0.082 * dr * (ws * sin(lat) * sin(ds) + cos(lat) *\n        cos(ds) * sin(ws))\n\n\n    # Ec. 34\n\n    N <- (24/pi) * ws\n\n    # Ec. 35\n\n    Rs <- (0.25 + 0.5 * (sunshine/N)) * Ra\n\n    # Ec. 37\n\n    Rso <- (0.75 + 2 * 10^(-5) * alt) * Ra\n\n    # Ec. 38\n\n    Rns <- (1 - alb) * Rs\n\n    # Ec. 39\n\n    Rnl <- ((4.903 * 10^(-9)) * (((Tmax + 273.16)^4 + (Tmin + 273.16)^4)/2)) *\n        (0.34 - 0.14 * sqrt(ea)) * (1.35 * (Rs/Rso) - 0.35)\n\n    # Ec. 40\n\n    Rn <- Rns - Rnl\n\n    # Ec. 42 Gday = 0\n\n    a <- psv/(psv + kp * (1 + 0.34 * uz))\n\n    b <- kp/(psv + kp * (1 + 0.34 * uz))\n\n    c <- (900/(Tm + 273)) * uz\n\n\n    et <- 0.408 * Rn * a + c * dpv * b\n\n\n}\n",
    "created" : 1487438212568.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3802471937",
    "id" : "96704282",
    "lastKnownWriteTime" : 1486935135,
    "last_content_update" : 1486935135,
    "path" : "~/GitHub/elisios/R/evapotranspiration.R",
    "project_path" : "R/evapotranspiration.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}