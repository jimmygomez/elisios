{
    "collab_server" : "",
    "contents" : "# elisios -----------------------------------------------------------------\n\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(tibble)\nlibrary(DT)\nlibrary(leaps)\nlibrary(scatterplot3d)\nlibrary(flashClust)\nlibrary(lubridate)\n\n\n\nshinyServer(function(input, output) {\n\n\n# manual update -----------------------------------------------------------\n\nmetdata <-  eventReactive(input$reload, {\n\n  file <-   elisios::getData(dir = input$wtdt)\n\n  file <- file %>%\n    dplyr::mutate(ETo = elisios::PenMon(data = file, date = \"date\",\n      Tmin = \"Tmin\", Tmax = \"Tmax\",\n      RHmin = \"RHmin\", RHmax = \"RHmax\",\n      sunshine = \"sunshine\", wind = \"wind\",\n      lat = \"latitude\", alt = \"altitude\", Hws = \"Hws\")) %>%\n    dplyr::mutate(date = zoo::as.Date(date)) %>%\n    dplyr::mutate(ETo = round(ETo,2))\n\n    }, ignoreNULL = FALSE)\n\n\n# Plot metdata ------------------------------------------------------------\n\n\n  output$wtplot <- plotly::renderPlotly({\n\n    file <- metdata()\n\n    file <- file %>%\n      dplyr::select(-latitude, -altitude, -Hws) %>%\n      dplyr::mutate(date = zoo::as.Date(date))%>%\n      tidyr::gather(key = variable , value = value,  -date)\n\n\n    ax <- list(\n      title = \"\",\n      type = \"date\",\n      tickformat = \"%d-%b\",\n      tickmode = \"auto\"\n     )\n\n    ay <- list(\n      title = \"\",\n      type = \"linear\",\n      tickmode = \"auto\"\n    )\n\n    lgd <- list(\n\n      orientation = \"h\",\n      xanchor = \"auto\"\n\n      )\n\n\n    plotly::plot_ly(file, x = ~date, y = ~value,\n            color = ~variable, symbol = ~variable) %>%\n      plotly::add_lines() %>%\n      plotly::layout(xaxis = ax, yaxis = ay, legend =  lgd)\n\n  })\n\n\n# Data frame in the screen ------------------------------------------------\n\n\n  output$gss <- renderUI({\n\n    gss <- tags$iframe(src = input$wtdt ,\n                       style=\"height:450px; width:100%; scrolling=no\")\n\n    print(gss)\n\n  })\n\n\n# Crop dataframe ----------------------------------------------------------\n\ncropdt <- reactive({\n\n\n  stg1 <- tibble::data_frame( crop = input$crop,\n                              date = (input$pdate:(input$pdate+ input$st1)),\n                              stage = \"initial\",\n                              DAP = 0:input$st1,\n                              Kc = input$kc1,\n                              CD = input$cd1,\n                              ID = input$id1\n  )\n\n  stg2 <- tibble::data_frame( crop = input$crop,\n                              date = ((input$pdate+input$st1+1):(input$pdate+input$st1+input$st2)),\n                              stage = \"develop\",\n                              DAP = (input$st1+1):(input$st1+input$st2),\n                              Kc = input$kc2,\n                              CD = input$cd2,\n                              ID = input$id2\n  )\n\n\n  stg3 <- tibble::data_frame( crop = input$crop,\n                              date = ((input$pdate+input$st1+input$st2+1):(input$pdate+input$st1+input$st2+input$st3)),\n                              stage = \"mid\",\n                              DAP = (input$st1+input$st2+1):(input$st1+input$st2+input$st3),\n                              Kc = input$kc3,\n                              CD = input$cd3,\n                              ID = input$id3\n  )\n\n\n  stg4 <- tibble::data_frame( crop = input$crop,\n                              date = ((input$pdate+input$st1+input$st2+input$st3+1):(input$pdate+input$st1+input$st2+input$st3+input$st4)),\n                              stage = \"end\",\n                              DAP = (input$st1+input$st2+input$st3+1):(input$st1+input$st2+input$st3+input$st4),\n                              Kc = input$kc4,\n                              CD = input$cd4,\n                              ID = input$id4\n  )\n\n\n  cdt <- rbind(stg1, stg2, stg3, stg4) %>%\n    dplyr::mutate(date = zoo::as.Date(date), Da = input$sden, FC = input$fc, WP = input$wp) %>%\n    as.data.frame()\n\n\n  })\n\n\n# merge table --------------------------------------------------------------\n\n\ncpt <- reactive({\n\n  file1 <- cropdt()\n  file2 <- metdata()\n\n  crop <- dplyr::left_join(file1, file2) %>%\n    dplyr::mutate(ETc = Kc*ETo) %>%\n    dplyr::mutate(Ni = ((FC-WP)/100)*Da*(1-CD/100)*ID) %>%\n    dplyr::mutate(Bi =  Ni/(input$ire/100) ) %>%\n    dplyr::select(crop, date, DAP, stage, Kc, ETo, ETc, Ni, Bi) %>%\n    dplyr::mutate(\n      ETo = round(ETo, 2),\n      ETc =  round(ETc, 2),\n      Ni = round(Ni, 2),\n      Bi = round(Bi,2)\n\n      )\n\n# input$area  input$irs :: need to use\n\n\n})\n\n\n# Table formated ----------------------------------------------------------\n\n\n  output$crop <- DT::renderDataTable({\n\n\n    file <- cpt()\n\n\n    DT::datatable(file,\n                  # filter = list(position = 'top', clear = FALSE),\n                  extensions = 'Scroller',\n                  rownames=FALSE,\n                  options = list(\n                    autoWidth = TRUE,\n                    columnDefs = list(list(className = 'dt-center', targets =\"_all\")),\n                    searching = FALSE,\n                    deferRender=TRUE,\n                    scrollY = 500,\n                    scroller = TRUE,\n                    initComplete = DT::JS(\n                      \"function(settings, json) {\",\n                      \"$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});\",\n                      \"}\")\n                    ))\n\n\n\n  })\n\n\n\n\n})\n\n\n",
    "created" : 1496946738875.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1966434451",
    "id" : "78BCBAFB",
    "lastKnownWriteTime" : 1493099836,
    "last_content_update" : 1493099836,
    "path" : "~/GitHub/elisios/inst/elisios/server.R",
    "project_path" : "inst/elisios/server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}